# import the necessary packages
from __future__ import print_function
from imutils.video.pivideostream import PiVideoStream
from picamera.array import PiRGBArray
from picamera import PiCamera
import imutils
import time
import cv2
import math
import numpy as np

def returnMaxIndex(array):
    max = 0
    index = 0
    for i in range (0, len(array)):
        if (array[i] > max):
            max = array[i]
            index = i
    return index          

def getRectangle(contours):

        max_approx = None
        max_peri = 0
        for i in range(0,len(contours)):
            #approximate the contour with accuracy proportional to
            #the contour perimeter
            approx = cv2.approxPolyDP(contours[i],cv2.arcLength(contours[i],True)*0.02,True)

            #Skip small or non-convex objects
            if(abs(cv2.contourArea(contours[i]))<100 or not(cv2.isContourConvex(approx))):
                continue
            ##add geometric restriction here
            
            #rectangle detection
 
            if(len(approx)==4):
                status = 1
                #print(len(approx))
                

                cnt = contours[i]
                #cv2.rectangle(res,(x,y),(x+w,y+h),(0,255,0),2)
                perimeter = cv2.arcLength(cnt,True)
                
                if(perimeter>max_peri):
                    max_approx = approx
                

                
                ###add outer contour restriction here

                #bounded rectangle

                #possibly redundant
                #epsilon = 0.05*cv2.arcLength(cnt,True)
                #approx = cv2.approxPolyDP(cnt,epsilon,True)
            
        return max_approx

def getOrderedCoordinates(approx):
                        #corners of bounded rectangle
                    #A
                    x1= approx[0][0][0]
                    y1= approx[0][0][1]
                    
                    #cv2.circle(res,(x1,y1), 5, (0,0,255), -1)
                    #B
                    x2= approx[1][0][0]
                    y2= approx[1][0][1]
                    #cv2.circle(res,(x2,y2), 5, (0,255,0), -1)
                    
                    #C
                    x3= approx[2][0][0]
                    y3= approx[2][0][1]
                    #cv2.circle(res,(x3,y3), 5, (255,0,0), -1)
                    #D
                    x4= approx[3][0][0]
                    y4= approx[3][0][1]



                    #corners arrangement
                    a = [x1, y1]
                    b = [x2, y2]
                    c = [x3, y3]
                    d = [x4, y4]

                    points = [a, b, c, d]

                    left = [a, b]
                    right = [c, d]

                    lr = 0
                    rt = 0

                    for i in range(0, 4):
                        lessThanElements = 0
                        for j in range(0, 4):
                            #print(f' a: {points[i][0]}  vs {points[j][0]}')
                            if points[i][0] <= points[j][0]:
                               # print('found')
                                lessThanElements = lessThanElements + 1
                        #print(lessThanElements)
                        if lessThanElements >= 3:
                            left[lr] = points[i]
                            lr = lr + 1
                        else:
                            right[rt] = points[i]
                            rt = rt + 1

                    if left[0][1] > left[1][1]:
                        top_left = left[1]
                        bottom_left = left[0]
                    else:
                        top_left = left[0]
                        bottom_left = left[1]

                    if right[0][1] > right[1][1]:
                        top_right = right[1]
                        bottom_right = right[0]
                    else:
                        top_right = right[0]
                        bottom_right = right[1]

                    #corners assignment
                        
                    xx1=top_left[0]
                    yy1=top_left[1]
                    xx2=bottom_left[0]
                    yy2=bottom_left[1]
                    xx3=bottom_right[0]
                    yy3=bottom_right[1]
                    xx4=top_right[0]
                    yy4=top_right[1]

                    return (xx1, yy1, xx2, yy2, xx3, yy3, xx4, yy4)
                
def visualiseCorners(xx1, yy1, xx2, yy2, xx3, yy3, xx4, yy4, diameter):
    cv2.circle(res,(xx1,yy1), diameter, (0,0,255), -1)
    cv2.circle(res,(xx2,yy2), diameter, (0,255,0), -1)
    cv2.circle(res,(xx3,yy3), diameter, (255,0,0), -1)
    cv2.circle(res,(xx4,yy4), diameter, (0,255,255), -1)

def getDistanceAndDirection(xx1, yy1, xx2, yy2, xx3, yy3, xx4, yy4):

    left_length = math.sqrt((xx1 - xx2)**2 + (yy1 - yy2)**2)
    right_length = math.sqrt((xx4 - xx3)**2 + (yy4 - yy3)**2)

    max_length = left_length

    direction =  right_length/ left_length
    
    if(right_length > left_length):
        right_length = max_length

   
    return (max_length, direction)

    
                
oldMillis = 0
millis = 0
frameRate = 0

lower = [0, 50, 0]
upper = [50, 255, 50]
         
# define range of green color in HSV
sensitivity = 20    
lower_green = np.array([60-sensitivity,100,50])
upper_green = np.array([60+sensitivity,255,255])

vs = PiVideoStream().start()
time.sleep(1.0)
 
# loop over some frames...this time using the threaded stream
while 1:
        millis = int(round(time.time() * 1000))
        frameRate = 1000/(millis - oldMillis)
        #print(frameRate)
        
        oldMillis = millis; 
        # grab the frame from the threaded video stream and resize it
        # to have a maximum width of 400 pixels
        frame = vs.read()
        
        hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
        
        # Threshold the HSV image to get only green colors
        mask = cv2.inRange(hsv, lower_green, upper_green)
        res = cv2.bitwise_and(frame, frame, mask = mask)
        
	# show the images
        #frame = imutils.resize(frame, width=640)
	#res = imutils.resize(res, width=640)
	## rectangle Detection
	canny = cv2.Canny(res,100,200)
	canny, contours, hierarchy = cv2.findContours(canny,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)
	raw_coor = getRectangle(contours)


        if (raw_coor != None):
            img = cv2.drawContours(frame, [raw_coor], -1, (0,0,255), 3)
            xx1, yy1, xx2, yy2, xx3, yy3, xx4, yy4 = getOrderedCoordinates(raw_coor)
            visualiseCorners(xx1, yy1, xx2, yy2, xx3, yy3, xx4, yy4, 5)
            distance, direction = getDistanceAndDirection(xx1, yy1, xx2, yy2, xx3, yy3, xx4, yy4)
            print(int(distance), direction)

	#cv2.imshow("canny", canny)
        cv2.imshow("images", np.hstack([frame, res]))
        # color detection here
        # check to see if the frame should be displayed to our screen
        #cv2.imshow("Frame", frame)
        key = cv2.waitKey(1) & 0xFF == ord('q') ## Exit on 
        if key:
                break

cv2.destroyAllWindows(countours)
vs.stop()



